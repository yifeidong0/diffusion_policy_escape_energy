name: "escape_energy_2d"

pred_horizon: 1 # predict pred_horizon steps but execute only action_horizon steps
obs_horizon: 1
action_horizon: 1

controller:
    common:
        sampling_time: 0.1  # sec
        use_single_step_inference: true
    networks:
        obs_dim: 2 # start position of the escape path
        action_dim: 40 # escape path composed of 20 waypoints
        obstacle_encode_dim: 12 # radii and positions of 3 obstacles
    noise_scheduler:
        type: "ddpm"
        ddpm:
            num_train_timesteps: 100  # number of diffusion iterations
            beta_schedule: "squaredcos_cap_v2"
            clip_sample: true  # required when predict_epsilon=False
            prediction_type: "epsilon"
        ddim:  # faster inference
            num_train_timesteps: 100
            beta_schedule: "squaredcos_cap_v2"
            clip_sample: true
            prediction_type: "epsilon"
        dpmsolver:  # faster inference, experimental
            num_train_timesteps: 100
            beta_schedule: "squaredcos_cap_v2"
            prediction_type: "epsilon"
            use_karras_sigmas: true

cbf_clf_controller:
    denoising_guidance_step: 100  # equals num_train_timesteps
    cbf_alpha: 10.0
    clf_gamma: 0.03
    penalty_slack_cbf: 1.0e+3
    penalty_slack_clf: 1.0

trainer:
    use_ema: true
    batch_size: 4
    optimizer:
        name: "adamw"
        learning_rate: 1.0e-4
        weight_decay: 1.0e-6
    lr_scheduler:
        name: "cosine"
        num_warmup_steps: 5

dataloader:
    batch_size: 4

normalizer:
    action:
        min: [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,]
        max: [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]
    observation:
        min: [-1, -1]
        max: [1, 1]

simulator:
    m_q: 1.0 # kg
    I_xx: 0.1 # kg.m^2
    l_q: 0.3 # m, length of the quadrotor
    g: 9.81
    dt: 0.01
